package auth;

import com.wrapper.spotify.SpotifyApi;
import com.wrapper.spotify.SpotifyHttpManager;
import com.wrapper.spotify.exceptions.SpotifyWebApiException;
import com.wrapper.spotify.model_objects.credentials.AuthorizationCodeCredentials;
import com.wrapper.spotify.requests.authorization.authorization_code.AuthorizationCodeUriRequest;
import com.wrapper.spotify.requests.authorization.authorization_code.pkce.AuthorizationCodePKCERequest;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

import org.apache.hc.core5.http.ParseException;

/**
 * Much of this code is from the API page (https://github.com/thelinmichael/spotify-web-api-java)
 * with examples, other references cited This is just required to perform many of the operations we
 * would like to do (sort of black-box)
 * 
 * @author nlao
 * 
 */
public class Authorization {
    /**
     * obtained from spotify developers' page
     */
    private static final String clientId = "5ba0d46d695b44eebf2ce5d9b5b0668c";
    /**
     * used when the user successfully/fails to authenticate, not really useful for us
     */
    private static final URI redirectUri = SpotifyHttpManager
            .makeUri("https://example.com/spotify-redirect");
    private static final String callBackURIString = redirectUri.toString();
    /**
     * these fields have to do with PKCE authentication
     */
    private final String codeVerifier;
    private final String codeChallenge;

    private static final SpotifyApi spotifyApi = new SpotifyApi.Builder().setClientId(clientId)
            .setRedirectUri(redirectUri).build();
    private final URI authorizeURI;

    private final AuthorizationCodeUriRequest authorizationCodeUriRequest;
//    private static final AuthorizationCodePKCERequest authorizationCodePKCERequest = spotifyApi.authorizationCodePKCE(code, codeVerifier)
//            .build();

    /**
     * constructor, initializes the necessary authentication codes
     */
    public Authorization() {
        String codeVerifier = null;
        try {
            codeVerifier = generateCodeVerifier();
        } catch (UnsupportedEncodingException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        this.codeVerifier = codeVerifier;

        String codeChallenge = null;
        try {
            codeChallenge = generateCodeChallange(codeVerifier);
        } catch (UnsupportedEncodingException | NoSuchAlgorithmException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        this.codeChallenge = codeChallenge;
        authorizationCodeUriRequest = spotifyApi.authorizationCodePKCEUri(codeChallenge)
//              .state("x4xkmn9pu3j6ukrs8n")
              .scope("user-read-recently-played,user-top-read,user-follow-read,user-library-read")
//              .show_dialog(true)
                .build();
        authorizeURI = authorizationCodeUriRequest.execute();
    }

    /**
     * Code retrieved from
     * https://www.appsdeveloperblog.com/pkce-code-verifier-and-code-challenge-in-java/
     * 
     * @return codeVerifier for each authentication request
     * @throws UnsupportedEncodingException
     */
    static String generateCodeVerifier() throws UnsupportedEncodingException {
        SecureRandom secureRandom = new SecureRandom();
        byte[] codeVerifier = new byte[32];
        secureRandom.nextBytes(codeVerifier);
        return Base64.getUrlEncoder().withoutPadding().encodeToString(codeVerifier);
    }

    /**
     * Code retrieved from
     * https://www.appsdeveloperblog.com/pkce-code-verifier-and-code-challenge-in-java/
     * 
     * @param codeVerifier generated by above method
     * @return codeChallenge, hashed
     * @throws UnsupportedEncodingException
     * @throws NoSuchAlgorithmException
     */
    static String generateCodeChallange(String codeVerifier)
            throws UnsupportedEncodingException, NoSuchAlgorithmException {
        byte[] bytes = codeVerifier.getBytes("US-ASCII");
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        messageDigest.update(bytes, 0, bytes.length);
        byte[] digest = messageDigest.digest();
        return Base64.getUrlEncoder().withoutPadding().encodeToString(digest);
    }

    String getCodeVerifier() {
        return codeVerifier;
    }

    String getCodeChallenge() {
        return codeChallenge;
    }

    public String getAuthorizationURI() {
        return authorizeURI.toString();
    }

    public SpotifyApi apiFromCode(String code) {
        SpotifyApi spotifyApi = new SpotifyApi.Builder().setClientId(clientId)
                .setRedirectUri(redirectUri).build();
        AuthorizationCodePKCERequest authorizationCodePKCERequest = spotifyApi
                .authorizationCodePKCE(code, codeVerifier).build();
        AuthorizationCodeCredentials authorizationCodeCredentials = null;
        try {
            authorizationCodeCredentials = authorizationCodePKCERequest
                    .execute();
            spotifyApi.setAccessToken(authorizationCodeCredentials.getAccessToken());
            spotifyApi.setRefreshToken(authorizationCodeCredentials.getRefreshToken());
        } catch (ParseException | SpotifyWebApiException | IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        System.out.println("Expires in: " + authorizationCodeCredentials.getExpiresIn());
        // Set access and refresh token for further "spotifyApi" object usage
        return spotifyApi;
    }
}
